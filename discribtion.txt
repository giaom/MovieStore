--------------------------- README: ---------------------------
NOTE:
TO RUN: press run button on replit with given files. 

my tests file:  In my test customer attempts to borrow 6 times but theres only 2 copies

Output:
Given output file shows 3 error messages before inventory:
ERROR: Z Invalid Genre. Try Again.
ERROR: Z Invalid Genre. Try Again.
ERROR: Invalid Genre. Try Again.

my output shows 2:
Error: invalid movie type Z
Error: invalid movie type Z

This is beccause data4movies.txt has an empty line at the end.
Given output file considers this an error in genre, hence why wrror shows
ERROR: (no char) Invalid Genre.
My program however ignores the empty line rather than considering it as invalid input.


# Movie Store Management System ---------------------------
## Overview
This Movie Store Management System is a software application designed to manage customer information and inventory for a movie store. It allows users to perform various operations such as adding customers, adding movies to the inventory, and processing transactions like borrowing and returning movies.

## Components

 1. Store
- Manages customer information and inventory.
- Utilizes instances of Customers and Inventory classes.
- Implements methods for building the store, processing transactions, and displaying information.

 2. Inventory
- Represents the inventory of movies.
- Utilizes a hash table for efficient lookup.
- Implements methods for adding movies, borrowing/returning movies, and displaying the inventory.

 3. HashTable
- Generic hash table template class implemented using arrays and pointers.
- Provides pure virtual functions for adding, removing, and displaying items.

 4. Customer
- Represents customer information.
- Includes data members for name and ID.
- Implements a method to display borrowing and return history.

 5. Movie
- Represents a movie entity with various attributes.
- Includes data members to store information about the movie, such as stock, director, title, release year, and availability status.
- Includes methods to add and remove stock, display movie information, and check availability.

 6. Transactions
- Provides classes for different types of transactions, such as Borrow and Return.
- Each transaction type contains information about the customer and the movie involved in the transaction.

 7. Classic
- Represents a classic movie, which is a subtype of Movie.
- Inherits from the Movie class and provides specific functionality and comparison methods tailored to classic movies.

 8. Comedy
- Represents a comedy movie, which is a subtype of Movie.
- Inherits from the Movie class and provides specific functionality and comparison methods tailored to comedy movies.

 9. Drama
- Represents a drama movie, which is a subtype of Movie.
- Inherits from the Movie class and provides specific functionality and comparison methods tailored to drama movies.

## Usage
1. Compile the source files.
2. Run the executable with appropriate input files containing customer information, movie information, and transaction information.
3. Follow the prompts to perform operations such as adding customers, adding movies to the inventory, and processing transactions.

## Dependencies
- C++ compiler (e.g., g++)
- Input files containing valid data in the specified formats



--------------------------- THE BELOW IS FROM THE ASSIGNMENT ---------------------------

Program 4 Description 
Program 4 is a group project. You many choose to work individually or in pairs. If working in pair, ensure that both members possess a similar level of programming proficiency to facilitate effective collaboration. Prior to commencing the assignment, it is essential that you self-assign yourself into groups. In the event of any issues arising during this process, please do not hesitate to contact to the instructor via email for assistance.

Description:
A local movie rental store wishes to automate their inventory tracking system. Currently there are three types of movies/videos (in DVD media) to be tracked:

Comedy (denoted as ‘F’ for funny)
Drama (denoted as ‘D’)
Classics (denoted as ‘C’)
Borrows and returns of items by customers are also to be tracked. Four types of actions are desired in the system:

Borrow (denoted as ‘B’): (stock – 1) for each item borrowed
Return (denoted as ‘R’): (stock + 1) for each item returned
Inventory (denoted as ‘I’): outputs the inventory of all the items in the store
History (denoted as ‘H’): outputs all the transactions of a customer


You will design and implement a program that will initialize the contents of the inventory from a file (data4movies.txt), the customer list from another file (data4customers.txt), and then process an arbitrary sequence of commands from a third file (data4commands.txt).



Details
All supporting files can be found Files>Programs/program 4 

If you unzip the datafiles.zip, you can find three text files.



(1) Movie file (data4movies.txt)
In data4movies.txt, the information about each movie is listed as follows:

For comedy movies: F, Stock, Director, Title, Year it released
For drama movies: D, Stock, Director, Title, Year it released
For classics movies: C, Stock, Director, Title, Major actor Release date
For example,

F, 10, Nora Ephron, You've Got Mail, 1998

      D, 10, Steven Spielberg, Schindler's List, 1993

      C, 10, George Cukor, Holiday, Katherine Hepburn 9 1938

      C, 10, George Cukor, Holiday, Cary Grant 9 1938

      Z, 10, Hal Ashby, Harold and Maude, Ruth Gordon 2 1971

      D, 10, Phillippe De Broca, King of Hearts, 1967

Important notes about data4movies.txt:

You may assume correct formatting, but codes may be invalid, e.g., in this data, the 'Z' code is an invalid entry so this line has to be discarded and users should be notified about this issue.
While the stock for each line is 10, do not assume that is the case in your design and implementation.
The classical movie type has a different format than the other two. It contains Major actor which is always formatted as two strings, first name and last name, separated by a space. Then the Release date contains month and year information, and no comma (but a space) between Major actor and Release date. In addition, for classical movies, one movie (e.g., Holiday) may have multiple lines so the total stock of this movie will be the sum of all the stocks in the lines about this movie (e.g., 20 for Holiday in the above example).
Example:

Scenario 1

      C, 10, George Cukor, Holiday, Katherine Hepburn 9 1938

      C, 10, George Cukor, Holiday, Cary Grant 9 1938

There are 20 total for Holiday initially. If customer wants to borrow Holiday with Hepburn, it will decrease the stock from Hepburn's stock, and the result is 

      C, 9, George Cukor, Holiday, Katherine Hepburn 9 1938

      C, 10, George Cukor, Holiday, Cary Grant 9 1938

Scenario 2

      C, 0, George Cukor, Holiday, Katherine Hepburn 9 1938

      C, 10, George Cukor, Holiday, Cary Grant 9 1938

There are 10 total for holiday initially. If customer wants to borrow Holiday with Hepburn, it is unavailable and ask other alternative (Holiday with Grant)



To store the data in the system, the items should be sorted as follows:

comedy movies (‘F’) sorted by Title, then Year it released
dramas (‘D’) are sorted by Director, then Title
classics (‘C’) are sorted by Release date, then Major actor
You can assume that each item is uniquely identified by its complete set of sorting attributes. 



(2) Customer file (data4customers.txt)
data4customers.txt contains customer information, one line per customer. Customers have a 4-digit ID number that uniquely identifies them, followed by last name, first name, all separated by a space. For example,

1111 Mouse Mickey

1000 Mouse Minnie

You can also assume that this data is formatted correctly.



(3) Command file (data4commands.txt)
data4commands.txt is used to test your code. The first field is action type (B, R, I, or H). Then the rest of fields are as follows:

Action types I: no more fields
Action type H: one more field customer ID. Fields are separated by a space
Action types B and R: customer ID followed by type of media (currently only ‘D’ for DVD) then movie type and movie data (with values of the two sorting attributes, using comma or space to separate them as in the movie data file). Fields are separated by a space.
For example,

B 1234 D C 9 1938 Katherine Hepburn

B 1234 D F Pirates of the Caribbean, 2003

R 1234 D C 9 1938 Katherine Hepburn

B 1234 D D Steven Spielberg, Schindler's List,

S

H 1234

X 1234 Z C 9 1938 Katherine Hepburn

B 1234 D Y 2 1971 Ruth Gordon

B 9999 D F Pirates of the Caribbean, 2003

B 1234 D C 2 1975 Blah Blah     



Again, the data will be formatted correctly, but may include errors.

You must handle an invalid action code (e.g., ‘X’ in the above example), invalid video code (e.g., ‘Y’), incorrect customer ID (i.e., not found. For example, 9999), and invalid movie (i.e., not found. For example, classic movie in month 2 of 1975 with a "Blah Blah" title). For bad data, discard the line and notify users.
You must also handle incorrect commands. For example, a command that makes the number of an item in the inventory goes below zero, a return command when a movie was not borrowed, etc.


Overall Requirements: (Please see the grading guideline for more details)
Do not print output for successful ‘B’ or ‘R’ commands, but print error messages for incorrect data and/or incorrect command. Output for ‘H’ and ‘I’ commands should be neatly formatted with one line per item/transaction. ‘I’ should output all Comedy movies, then all Dramas, then all Classics. Each category of movies should be ordered according to the sorting criteria discussed above. ‘H’ should show a list of DVD transactions of a customer in chronological order (latest to earliest) and specify whether the movie was borrowed or returned.
You are required to use at least one hash table in this assignment. There are multiple places where they could be used. We will be covering hash tables soon in the class. If you want to get started, the important aspect of hash tables is that they are used for fast lookup of items. For example, if each item can be mapped into a unique number, you can use an array to store the items according to their unique number and look them up in O(1) time. Hash tables usually waste some memory, since not all the array will be filled. However, the waste is not too bad, if you store pointers to items, rather than the items themselves.
You are required to use inheritance for movie and transactions. If you find you’re using templates a lot, run it by me, as this assignment is designed for you to practice using inheritance.
There are no other specific requirements for this assignment, but as always it should be well designed (not violate the basic design principles – will be discussed in class), easily extensible, efficiently coded, well documented, etc.


Design Requirements
Your design should document the work that needs to be done to complete the assignment. It should be a complete and clear description of how the program is organized. The more time you spend on your design, the less you will spend coding, debugging, and modifying.



Your design should include (at least) the following components in this order:

Overview/Specification:  This is a concise description of the design and the interrelation among its components (the interaction between the classes). It encompasses an overview of the main function, elucidating the program's purpose, delineating the input and output format, elucidating the program's performance in achieving the desired output. Additionally, it outlines the anticipated outcomes, enumerates potential runtime errors, and proposes strategies for their resolution (error handling). 
Class diagram:  This is a UML diagram showing class relationships, including inheritance and composition. You can use Visio, or online drawing tool, or neatly draw this by hand. Provide detailed description of the relationships of classes using the diagram.
Class descriptions:  For each class in the design, describe the data and methods as part of a documented C++ header.  (Do not attach all header files, though). The task that each function performs, and the purpose of each data member should be clearly described. High-level pseudo code should be included for the most important methods (for example, those that control the flow of the program). Not all parameters need to be included for methods. Please order the files properly, i.e., put the most important classes first, put parent classes before children classes. 
Implementation and Test Plan: Provide a brief summary of implementation and test plan. 
You should put considerable effort into the design (comparable to a lab implementation) or you should not expect to receive a good score. A useful approach is to imagine that you are writing a design that someone else will need to implement and extend. Document your design as you would want someone else to document for you. Some questions you might want to ask yourself:

Can your design be extended beyond the specifications given here?
Could you easily add new videos or DVDs to your design?
Can you easily add other categories of videos or DVDs?
Could you easily add new categories of media to your design, for example, music?
Could you expand to check out other kinds of items, for example VCRs or DVD players?
Could you easily add new operations to your design?
Could you incorporate time, for example, a due date for borrowed items?
Could you easily add an additional store, or handle a chain of stores?
Your design can go beyond the scope of these specifications (and you will not need to implement extensions). Thinking of possible extensions in advance often improves the design.

Additionally, you can refer the following peer-review questions to understand the principles of design.

Examples
UML diagram example:
An example of class diagram is provided below. You should not just copy and use the diagram, but you are welcome to modify (add/remove/substitute) the diagram.

UML.png





Class Description Example: 
Constructor and destructor. The constructor initializes an empty graph by setting setting numVertices and numEdges to 0. Since a vector is used to hold the adjacency list head pointers, there is no need for the destructor to explicitly deallocate memory for it; however, the destructor will need to iterate through all of the adjacency lists to deallocate the Graph::Nodes.
createVertices(number: int): void. Sets up the graph to hold the indicated number of vertices. Sets numVertices to that number, then sets listHeads[0] through listHeads[numVertices-1] to be nullptr.


What to submit
Submit the design document to canvas:
Only one member in a group should submit a soft copy. Otherwise, it will be overwritten.
Submit as one file (docx, or pdf) 
Peer-review (due by Mar. 2nd)
After submit, please provide reviews for your peers (the peers will be assigned automatically after due)


Peer-review
We will conduct peer-review for this assignment. Each one will be assigned to provide peer-review for 2 submissions. 

You can refer the guideline for peer review: PeerReview.pdf

1. Go over the peer-review questions and check if you can find the answers from your assigned design.

2. Identify the classes that used inheritance, hash table, and overloaded functions. 

3. Provide any feedback that can improve the design

4. Peer-review is not graded, however, if you do not provide peer-review, then will take off 2 points from this assignment. Those who provide valuable, detailed reviews that can actually help the team will get 2 bonus points (added to this assignment).

5. Peer-review is due one week after the design submission.

Rubric
Program 4 Design (343)
Program 4 Design (343)
Criteria	Ratings	Pts
This criterion is linked to a Learning OutcomeOverview/Specification
Does it provide all required contents?
2 pts
This criterion is linked to a Learning OutcomeClass diagram
- Design using at least one hash table

- Design using inheritance

- Movies have overloaded comparison operators or other ways to compare

- Reasonably object oriented, module, extensible
3 pts
This criterion is linked to a Learning OutcomeClass description
- Description of each class

- High level pseudocode included for important methods (flow-chart)
3 pts
This criterion is linked to a Learning OutcomeImplementation and Test Plan
1 pts
This criterion is linked to a Learning OutcomePeer-review
Peer review is due by Mar.2nd, 2024. If not provided, then will take off 2 points. If reviews are very good, then will get 2 bonus points.
0 pts
Total Points: 9



Design Review Questions
1. Look at the parent/ancestor class of specific movies. Is there a virtual (or pure virtual)
function for implementing operator< and operator== ? If not, is there a similar virtual
function that might be used to implement operator< and operator== ?
2. a) Are the different movies stored in different containers?
b) What class holds that container?
c) How are the movies kept sorted in that container?
d) Are the "movie containers" themselves inside another container?
e) How is the specific "movie container" found or chosen?
3. What is stored in their hash table (the one implemented from scratch)? What class is it
in? If more than one, pick one.
2
4. Describe as specifically as possible how a Classics movie is read and stored.
Depending on the design, you might be able to list the sequence of functions called, or might
have a more abstract description. If the Classics movie format was changed to have the
release date include day month and year, what class/function will need to be changed?
5. Describe as specifically as possible how a Borrow command is read and executed.
Depending on the design, you might be able to list the sequence of functions called, or might
have a more abstract description.
6. List any questions/clarifications you asked the designers and give their
responses/clarifications.
7. Overall, is the design clear? Complete? Missing classes? What would you need to take
this design and implement the project?2
4. Describe as specifically as possible how a Classics movie is read and stored.
Depending on the design, you might be able to list the sequence of functions called, or might
have a more abstract description. If the Classics movie format was changed to have the
release date include day month and year, what class/function will need to be changed?
5. Describe as specifically as possible how a Borrow command is read and executed.
Depending on the design, you might be able to list the sequence of functions called, or might
have a more abstract description.
6. List any questions/clarifications you asked the designers and give their
responses/clarifications.
7. Overall, is the design clear? Complete? Missing classes? What would you need to take
this design and implement the project?


---------------------------------------------------------------------------------

Program 4 design 

Overview/Specification: 
This is a concise description of the design and the interrelation among its components (the interaction between the classes). It encompasses an overview of the main function, elucidating the program's purpose, delineating the input and output format, elucidating the program's performance in achieving the desired output. Additionally, it outlines the anticipated outcomes, enumerates potential runtime errors, and proposes strategies for their resolution (error handling). 


 Purpose:
The program serves as an inventory management system for a local movie rental store, automating the tracking of customer information and movie inventory. It supports actions such as borrowing and returning movies, displaying inventory, and providing transaction history.


First read the inventory. Read from file data form, in the format of movie type, stock, director, title. For comedy and drama, continue with year released, for classics, continue with major actor and month and year of release. For each movie successfully read in the file, an appropriate Movie class instance will be allocated and put in the Inventory class. Initially only C, D, F formats are allowed. New formats may be added in the future if needed.


After all movies are read, read customer database. That will be in the order of 4-digit ID, followed by last name, then first name, all separated by spaces. For each line item in the file, allocate an instance of Customer class.


Once all the customers are read in, data commands will be executed. 
Only 4 action commands are allowed, B R I and H. Any other commands will result in an error message. 
In case of inventory / I command, Store class calls Inventory class’s inventory method to list all movies that are in the inventory. 
In case of history / H command, we will need a valid customer ID, call CustomersData class to find the customer (if not found, print error message.) Then, display all transactions of the customer. 


In the case of borrow / B command, read in the customer ID, check customerData class to check it’s a valid customer, if valid, read in movie data. Then we will look for the movie in the inventory class, if stock is greater than 0, let customer borrow movie by decrementing stock by 1, and adding a borrow transaction in the customerData class. 


In the case of return / R,  read in the customer ID, check customerData class to check it’s a valid customer, if valid, read in movie data. Then we will look for the movie in the inventory class, if we find the movie then we will let the customer return the movie by incrementing stock by 1, and adding a return transaction in the customerData class.






 Input and Output:
- Input Files:
  - `data4movies.txt`: Contains information about each movie.
  - `data4customers.txt`: Contains customer information.
  - `data4commands.txt`: Contains a sequence of commands to process.


- Output:
  - Error messages for incorrect data and commands.
  - Neatly formatted output for 'H' and 'I' commands.
  - No direct output for successful 'B' or 'R' commands.


 Anticipated Outcomes:
- Successful handling of borrow and return transactions.
- Neatly formatted display of inventory and transaction history.
- Detection and handling of invalid commands and data.


 Potential Runtime Errors:
- Incorrect action codes.
- Invalid video codes.
- Incorrect customer IDs.
- Invalid movies.


 Error Handling:
- Discard lines with invalid entries and notify users.
- Print error messages for incorrect data and commands.


Class diagram:  
This is a UML diagram showing class relationships, including inheritance and composition. You can use Visio, or online drawing tool, or neatly draw this by hand. Provide detailed description of the relationships of classes using the diagram.



Zoomed in:

(Inventory implements Movie)



Class descriptions:  
For each class in the design, describe the data and methods as part of a documented C++ header.  (Do not attach all header files, though). The task that each function performs, and the purpose of each data member should be clearly described. High-level pseudo code should be included for the most important methods (for example, those that control the flow of the program). Not all parameters need to be included for methods. Please order the files properly, i.e., put the most important classes first, put parent classes before children classes. 


.h files attached separately.
Files in order are: Store, CustomersData, Customer, Inventory, Movie, Comedy Drama Classic, and HashTable<T>. 


Store Class:
Manages customer information and inventory.
Utilizes instances of Customers and Inventory classes.
Implements methods for building the store, borrowing/returning movies, and displaying information.
Inventory Class:
Represents the inventory of movies.
Utilizes a hash table for efficient lookup.
Implements methods for adding movies, borrowing/returning movies, and displaying the inventory.
HashTable Template Class:
Generic hash table template class implemented using arrays and pointers.
Provides pure virtual functions for adding, removing, and displaying items.
Drama, Comedy, Classic Classes:
Represent specific movie genres, inheriting common attributes from the base Movie class.
Include genre-specific data members.
Implement constructors and getter methods.
Customer Class:
Represents customer information.
Includes data members for name and ID.
Implements a method to display borrowing and return history.


Implementation and Test Plan: 
Provide a brief summary of implementation and test plan. 


 Implementation:
1. Store Class:
   - Responsible for managing customer information and inventory.
   - Utilizes instances of `Customers` and `Inventory` classes.
   - Implements methods for building the store from a file, borrowing/returning movies, and displaying information.


2. Inventory Class (Derived from HashTable<Movie>):
   - Represents the inventory of movies.
   - Utilizes a hash table for efficient lookup.
   - Implements methods for adding movies, borrowing/returning movies, and displaying the inventory.


3. HashTable Template Class (Base Class):
   - A generic hash table template class implemented using arrays and pointers.
   - Provides pure virtual functions for adding, removing, and displaying items.


4. Drama, Comedy, Classic Classes (Derived from Movie):
   - Represent specific movie genres, inheriting common attributes from the base `Movie` class.
   - Include genre-specific data members.
   - Implement constructors and getter methods.


5. Customer Class:
   - Represents customer information.
   - Includes data members for name and ID.
   - Implements a method to display borrowing and return history.


 Test Plan:
1. Build Store from File:
   - Verify that the store can be successfully built from the input files.
   - Check for proper handling of invalid data.
   - From generated store, print out text file for inventory and customers, and compare that input and output files are equivalent, i.e. have the same movies and customers. The output file will be different than the input files for invalid inputs.


2. Borrow and Return Movies:
   - Perform borrow and return transactions.
   - Ensure that movie availability is updated correctly. Stock increments when returns and decrements for borrowing movies. Cannot borrow when stock is 0. 
   - Check for proper handling of invalid transactions/input.


3. Display Inventory:
   - Verify that the inventory is displayed in the correct order.
   - Ensure the correct formatting of the displayed inventory.


4. Display History:
   - Display borrowing and return history for customers.
   - Check for proper handling of invalid customer IDs.


